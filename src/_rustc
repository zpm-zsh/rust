#compdef rustc

local arguments

arguments=(
  {-h,--help}'[show help message]'
  '--cfg[configure the compilation environment]'
  '-L:add a directory to the library search path:(dependency= crate= native= framework= all=)'
  '-l:link the generated crate(s) to the specified native library name:(static= dylib= framework=)'
  '--crate-type[\[bin|lib|rlib|dylib|cdylib|staticlib|proc-macro\] comma separated list of types of crates for the compiler to emit]'
  '--crate-name[specify the name of the crate being built]'
  '--edition:specify which edition of the compiler to use when compiling code:(2015 2018)'
  '--emit[\[asm|llvm-bc|llvm-ir|obj|metadata|link|dep-info|mir\] comma separated list of types of output for the compiler to emit]'
  '--print[\[crate-name|file-names|sysroot|cfg|target-list|target-cpus|target-features|relocation-models|code-models|tls-models|target-spec-json|native-static-libs\] compiler information to print on stdout]'
  '-g[equivalent to -C debuginfo=2]'
  '-O[equivalent to -C opt-level=2]'
  '-o[write output to <filename>]'
  '--out-dir[write output to compiler-chosen filename in <dir>]'
  '--explain[provide a detailed explanation of an error message]'
  '--test[build a test harness]'
  '--target[target triple for which the code is compiled]'
  {-W,--warn}'[set lint warnings]'
  {-A,--allow}'[set lint allowed]'
  {-D,--deny}'[set lint denied]'
  {-F,--forbid}'[set lint forbidden]'
  '--cap-lints[set the most restrictive lint level]'
  {-C,--codegen}'[set a codegen option]'
  {-V,--version}'[print version info and exit]'
  {-v,--verbose}'[use verbose output]'
  '-C[print codegen options]'
  '-W[print lint options and default settings]'
  '-Z[print unstable compiler options]'
  {--help,-v}'[print the full set of options rustc accepts]'
  '*:filename:_files'
)

_arguments -s $arguments
